Section: 11->Primitive Type Functional Interfaces, UnaryOperator and BinaryOperator

66. Autoboxing,Autounboxing and Type Parameter
******************************************************************************************************************
1. Autoboxing:
Automatic conversion from primitive type to Object type by compiler is called autoboxing.
Integer i= 10;
means compiler will take like 
Integer i= Integer.valueOf();

2. Autounboxing:
Automatic conversion from object type to primitive type by compiler is called autounboxing.
example->
Integer i= new Integer(10);
int x=  I;Auto-Boxing
means 
int x= I.intValue();
                                Auto-Unboxing
	Wrapper	Object 	Type ---------------------------------------> Primitive Type
                                Auto-Boxing
  Primitive Type       ---------------------------------------> Wrapper	Object 	Type
  
  3. Generic type of casting:
  In the case of generics, the type parameter is always object type and no chance of passing primitive type.
  ArrayList<Integer> l = new ArrayList<Integer>();//valid 
  ArrayList<int> l = new ArrayList<int>();//invalid

******************************************************************************************************************
Lecture 67. Need of Primitve Type Functional Interfaces

******************************************************************************************************************
Lecture 68. Primitve Type Functional Interfaces for Predicate
interface IntPredicate{
public boolean test(int i){

}
}
import java.util.function.Predicate;

public class PrimitveFunctionalInterfaces {
	public static void main(String[] args) {
		int[] intArray = { 0, 5, 10, 15, 20, 25 };
		Predicate<Integer> p = i -> i % 2 == 0;
		for (int x : intArray) {
			if (p.test(x)) {
				System.out.println(x + " ");
			}
		}
	}
}
Output->
0 
10 
20 
In the above examples,6 times autoboxing and autounboxing happening which creates Performance problems.

To overcome this problem primitive functional interfaces introduced, which can always takes primitive types as input and return primitive types.Hence autoboxing and autounboxing won't be required,which improves performance.

Primitive Type Functional Interfaces for Predicate:
The following are various primitive Functional interfaces for Predicate.
1.IntPredicate-->always accepts input value of int type
interface IntPredicate {
	public boolean test(int i);
	// default methods: and(),or(),negate() 5) }
}
2.LongPredicate-->always accepts input value of long type 
interface LongPredicate {
	public boolean test(long l);
	// default methods: and(),or(),negate() }
}
3.DoublePredicate-->always accepts input value of double type
interface DoublePredicate {
	public boolean test(double d);
	// default methods: and(),or(),negate()
}
Demo Program for IntPredicate:

import java.util.function.IntPredicate;
import java.util.function.Predicate;

public class PrimitveFunctionalInterfaces {
	public static void main(String[] args) {
		int[] intArray = { 0, 5, 10, 15, 20, 25 };
		IntPredicate p = i -> i % 2 == 0;
		for (int x : intArray) {
			if (p.test(x)) {
				System.out.println(x + " ");
			}
		}
	}
}

output->
0 
10 
20 
In the above example, autoboxing and autounboxing won't be performed internally.Hence performance wise improvements are there.
******************************************************************************************************************
Lecture 69. 3 Demo Programs about Primitve Type Functional Interfaces for Function


******************************************************************************************************************
Lecture 70. All 15 Primitve Type Functional Interfaces for Function
1.IntFunction<R>
public R apply(int i)

2.DoubleFunction<R>
public R apply(double d)

3.LongFunction<R>
public R apply(long l)

All above 1,2,3 talk about Input type.

4.ToIntFunction <T>
public int applyAsInt(T t)

5.ToDoubleFunction <T>
public double applyAsDouble(T t)

6.ToLongFunction <T>
public Long applyAsLong(T t)

Above 4,5,6 based on Return type.
7.IntToLongFunction
public long applyAsLong(int)

8.IntToDouble
public double applyAsDouble(int)

9.DoubleToInt
public int applyAsInt(double d)

10.DoubleToLong
public long applyAsLong(doule d)

11.LongtoInt
public int applyAsInt(long l)

12.LongToDouble
public doublem applyAsDoubl(long l)

13.ToIntBiFunction
public int applyAsInt(T t, U u)

14.ToDoubleBiFunction
public double applyasDouble(T t,U u)

15.ToLongBiFunction
public long applyAsLong(T t, U u)

******************************************************************************************************************
Lecture 71. Primitive Versions for Consumer
Interface Consumer<T>{
public void accept(T t)
}

Consumer<Integer> c= i-> SOP(i*i);
c.accept(12);

and with Primitive for Consumer
Interface IntConsumer
public void accept(int i){
IntConsumer c= i->SOP(i*i);
c.appcept(10);
}
}

As like same
IntConsumer
accept(int i)

LongConsumer
accept(long l)

DoubleConsumer
accept(double d)

ObjectIntConsumer<T>
public void accept(T t, int i)

ObjectLongConsumer<T>
public void accept(T t,long l)

ObjectDoubleConsumer<T>
public void accept(T t,double d)
******************************************************************************************************************
Lecture 72. Primitive Versions for Supplier


******************************************************************************************************************
Lecture 73. UnaryOperator and its Primitive Versions
Urnary Operator
Binary Operator
Function<T, R>

Interaface Function(T,R)[
public R apply(T )
{
}



import java.util.function.Function;

public class PrimitveFunctionalInterfaces {
	public static void main(String[] args) {
		Function<Integer, Integer> f= i-> i*i;
		System.out.println(f.apply(10));
	}
}


Uranary Operator->
1.If input and output same type then we should go for UnaryOperator.
2.It is a child of Function Interface.
example->
interface UnaryOperator{
public T apply(T t);
}
import java.util.function.UnaryOperator;

public class PrimitveFunctionalInterfaces {
	public static void main(String[] args) {
		UnaryOperator<Integer> o= i-> i*i;
		System.out.println(o.apply(10));
	}
}

Three types of Uranary Operators
1.IntUrnaryOperator-> public int applyAsInt(int i)
2.DoubleUrnaryOperator->public double applyAsDouble(double d)
3.LongUrnaryOperator->public long applyAsLong(ling l)

interface IntUrnaryOperator{
public int aaplyAsInt(int i);
}

import java.util.function.IntUnaryOperator;

public class PrimitveFunctionalInterfaces {
	public static void main(String[] args) {
		IntUnaryOperator o= i-> i*i;
		System.out.println(o.applyAsInt(10));
		System.out.println(o.applyAsInt(112	));

	}
}
Note->
Urnary Operator alys special case of Functional Interface while input and return type will be same so we will go through
UrnaryOperator.
******************************************************************************************************************
Lecture 74. BinaryOperator
BiFunction<T,T,T>

Interface BiFunction<T,U,R>
{
public R apply(T t, U u);
}
BiFunction<String,String,String> f= (s1,s2)->s1+s2;
f1.apply("durga","soft");


Interafce BinaryOperator<T>
{
public T apply(T t1, T t2);
}
BinaryOperator<String> f= (s1,s2)->s1+s2;
sop(f.apply("durga","soft");

******************************************************************************************************************
Lecture 75. Primitive Versions for BinaryOperator
1.interface IntBinaryOperator{
public int applyAsInt(int i, int i);
}

IntBinaryOperator f= (i,i)-> i*i;
sop(f.applyAsInt(10,20);

2.DoubleBinaryOpeator
3.LongBinaryOperator

******************************************************************************************************************
******************************************************************************************************************
