Section: 3->Lambda Expressions with Collections
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Lecture 12. Collections Overview: List and Set
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Collection:A group of Object in a single entity called Collection.
Type of Collection!!!!
1.List(Interace)
why ?
1.1. Insertion Order preserve and duplicate Object must  allowed then happly we will go for List.
Example:
ArrayList
example :
public class ListDemo {
	public static void main(String[] args) {
		List<String> list = new ArrayList<String>();
		list.add("Sunny");
		list.add("Bunny");
		list.add("Chinny");
		list.add("Sunny");
		System.out.println(list);
	}
}


Linked List
Vector
Stack


2.Set(Interface)
why?
When Duplicate not allowed and insertion order not maintained then we will go through Set.
public class SetDemo {
	public static void main(String[] args) {
		Set<String> set = new HashSet<String>();
		set.add("Sunny");
		set.add("Bunny");
		set.add("Chinny");
		set.add("Sunny");
		System.out.println(set);
	}
}
[Chinny, Bunny, Sunny]
HashSet(Order will be based on HashCode)
TreeSet(Sorted Set)

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
lecture 13. Collections Overview: Map
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

3.Map(Interface)
Why?
A group of object with key-and-value we will go for map concept.
example. RollNumber -> Name
         Mobile Number-> Address
         EmployeeId-> Salary
       
 public class MapDemo {
	public static void main(String[] args) {
		Map<String, String> map = new HashMap<String, String>();
		map.put("A", "Apple");
		map.put("Z", "Zebra");
		map.put("Durga", "Java");
		map.put("B", "Boy");
		map.put("T", "Tiger");
		System.out.println(map);
	}
}
{A=Apple, B=Boy, T=Tiger, Z=Zebra, Durga=Java}

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
lecture: 14. Comparator interface & compare method
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Comparator(Interface)->only one Abstract method compare() is called Functional interface.
why?
to Define  our own sorting (Customize Sorting).
public int compare(Object obj1, Object obj2)
return -ve-> if object1 has to come before obj2.
return +ve-> if obj1 has to come after obj2.
retirn 0-> if obj1 or obj2 equal .
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Lecture 15. Sorting Elements of List without Lambda Expression

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
1.Defualt Sorting Number ->Incresing Order
                  String ->Alphabetic Order
                           
public class DefulatSorting {
	public static void main(String[] args) {

    List<Integer> list= new ArrayList<Integer>();
    list.add(10);
    list.add(0);
    list.add(15);
    list.add(5);
    list.add(20);
    System.out.println("Before Sorting-> "+list);
    Collections.sort(list);
    System.out.println("After Sorting-> "+list);

	}
}


public class DefulatSorting {
	public static void main(String[] args) {

		List<Integer> list = new ArrayList<Integer>();
		list.add(10);
		list.add(0);
		list.add(15);
		list.add(5);
		list.add(20);
		System.out.println("Before Sorting-> " + list);
		Collections.sort(list, new MyComparator());
		System.out.println("After Sorting-> " + list);

	}
}

class MyComparator implements Comparator<Integer> {

	@Override
	public int compare(Integer objInt1, Integer objInt2) {
		if(objInt1 > objInt2)
		return -1;
		 else if(objInt1 < objInt2)
			return +1;
		 else
			 return 0;
		
	}

}
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

public class DefulatSorting {
	public static void main(String[] args) {

		List<Integer> list = new ArrayList<Integer>();
		list.add(10);
		list.add(0);
		list.add(15);
		list.add(5);
		list.add(20);
		System.out.println("Before Sorting-> " + list);
		Collections.sort(list, new MyComparator());
		System.out.println("After Sorting-> " + list);

	}
}

class MyComparator implements Comparator<Integer> {

	@Override
	public int compare(Integer objInt1, Integer objInt2) {

		return (objInt1 > objInt2 ? -1 : (objInt1 < objInt2) ? +1 : 0);

	}

}
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Lecture 16. Sorting Elements of ArrayList with Lambda Expression
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
package io.javabrains;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class DefulatSorting {
	public static void main(String[] args) {

		List<Integer> list = new ArrayList<Integer>();
		list.add(10);
		list.add(0);
		list.add(15);
		list.add(5);
		list.add(20);
		System.out.println("Before Sorting-> " + list);
		Collections.sort(list, (objInt1, objInt2) -> objInt1 > objInt2 ? -1 : objInt1 < objInt2 ? +1 : 0);
		System.out.println("After Sorting-> " + list);

	}
}
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Lecture 17. Sorting Elements of TreeSet with Lambda Expression
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

public class TreeSetDemo {
	public static void main(String[] args) {

		Set<Integer> set = new TreeSet<Integer>(
				(objInt1, objInt2) -> objInt1 > objInt2 ? -1 : objInt1 < objInt2 ? 1 : 0);
		set.add(10);
		set.add(0);
		set.add(15);
		set.add(5);
		set.add(20);
		set.add(25);

		System.out.println("After Sorting-> " + set);

	}
}
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Lecture 18. Sorting Elements of TreeMap with Lambda Expression
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
package JavaLambdaExpression01;

import java.util.TreeMap;

public class TreeMapLamdaEx {
	public static void main(String[] args) {
		TreeMap<Integer, String> m = new TreeMap<Integer, String>((I1, I2) -> (I1 > I2) ? -1 : (I1 < I2) ? 1 : 0);
		m.put(100, "Durga");
		m.put(600, "Sunny");
		m.put(300, "Bunny");
		m.put(200, "Chinny");
		m.put(700, "Vinny");
		m.put(400, "Pinny");
		System.out.println(m);

	}
}

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Lecture 19. Sorting of Our own class objects with Lambda Expression
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
