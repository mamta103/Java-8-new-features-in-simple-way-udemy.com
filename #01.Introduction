# Java-8-new-features-in-simple-way-udemy.com
Lecture 1
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
* Lecture 1                                                                                                      *
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

1.Lamda Expression.
2.Functional Interfaces.
3.Default Methods in interfaces.
4.Static methods in interfaces.
5.Predicates.
6.Function.
7.Consumer.
8.Method Reference and Constructor refernce by double colon( :: ) operatore.
9.Stream API
10.Date and Time API(JODA Api)joda api.

jdk Versions:
1.0
1.1
*1.2
1.3
1.4
**1.5(Generics, Auto boxing, Auto Unboxing)
1.6
1.7
***java 1.8 intetions:- (1.to simplfy way of writing  programming very consise codes 2.to utilize Functional programming benefits in java 3.to enable paraeller 
processing in java)


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
* Lecture 2                                                                                                      *
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
1.Lambda Expressions.LIPS is very first used Lammdas Expression
benefits:
1.to enable Functional Programming in java.
2.to write more readable , maintable and clean concise code.
3.to use API very eaisly and effectively.
4.to enable parallel processing.

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
* Lecture 3.How to write lambda expresion part-1                                                                 *                                     *
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
1.Lamda expression is Annonymous Function
1.1->not having Name
1.2->not having Modifer.
1.3->not having Return type.
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
* Lecture 3.How to write lambda expresion part-1                                                                 *                                     *
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
public static void m1(){
	System.out.println("Hello World");
}

Lamda Expression:
ex01:-() -> System.out.println("Hello World");(
ex02:-	 (a,b)-> System.out.println(a+b);
  
ex03:-  public static int getLength(String str) return str.length();
	
Lambda Expression:-(String str)-> return str.length();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
* Lecture 4.How to Write Lambda expresion part-2                                                               *                                     *
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
if compiler can gets type automatically the on the based of context we can remove the types also it called
Type Infernce.
public int add(int a,int b){
		System.out.println(a+b);
	}
	
Lambda Expression:-
(a, b)-> System.out.println(a+b);
ex02:- 
public int getLength(String str){
		return str.length();
	}
Lambda Expression:-(str)-> str.length(); for one parameter no need paranetisis
s->s.length()

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
* Lecture 4.How to Write Lambda expresion part-2                                                               *                                     *
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
characteristic and property in java8
1.a lambda expression can take any number of parameters.
e.g.=>   ()-> SOP("Hello");
         (s)-> SOP(s.length);
	 (a,b)->SOP(a+b);

2.if multiples parameters persent then this parameters will be repeated with comma(,).
e.g. (a,b)->SOP(a+b);

3.If onlyone parameter persent then paraenthis optional.
e.g. (s)->s.length;
     or
     s->s.length();
    
4.If usally we can specify the type of parameters,if compiler expect the type based on context then we can remove type[Type Inference]
e.g. (int a,int b)->SOP(a+b);
     or
     (a,b)-> SOP(a+b);
 5.If only one line of statment then curly bracket is optional, and if multiple statement line then curly bracket will be manadatory
 as like same before C,C++.
 e.g. (){ 
        SOP();
	SOP();
	}
	
	or
	()->SOP("Hello");
6.if lambda expression rerurn somthing then we can remove return type too.
e.g. s-> s.length();
