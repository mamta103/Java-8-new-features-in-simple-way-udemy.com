#1.

import java.util.function.Function;
import java.util.function.Predicate;

class InterfMain {
	public static void main(String[] args) {
		Function<String, Integer> f1 = s -> s.length();
		System.out.println("Length of String-> " + f1.apply("Cognizant"));
		System.out.println("Length of String-> " + f1.apply("Technology"));
	}
}
***********************************************************************************************************************
Output->Length of String-> 9
Length of String-> 10
***********************************************************************************************************************
#2.


import java.util.function.Function;
import java.util.function.Predicate;

class InterfMain {
	public static void main(String[] args) {

    Function<Integer,Integer> f1= i-> i*i;
    System.out.println("Square of given number-> "+f1.apply(12));
    System.out.println("Square of given number-> "+f1.apply(13));
    System.out.println("Square of given number-> "+f1.apply(14));
    System.out.println("Square of given number-> "+f1.apply(15));
	}
}
***********************************************************************************************************************
Output->
Square of given number-> 144
Square of given number-> 169
Square of given number-> 196
Square of given number-> 225
***********************************************************************************************************************
#3. Difference between Predicate and Function.
# Predicate->
1.To implement conditions check we should go for Predicate.
2.Predicate can take one type parameter which represent input argument type.Predicate<T>.
3.Predicate interface defines one abstarct method called test().
4.public boolean test(T t).
5.Predicate can return only boolean value.

#Function->
1.To perform certain operation and to return some result we should go for Function.
2.Predicate can take two type of parameter first one represnt input argument type and second one represnt return type.Function<T,R>.
3.Function interface defines only one abstract method called apply().
4.public R apply(T t).
5.Function can return any type of value.
***********************************************************************************************************************
#7.2  Program to remove spaces present in the given String by using Function

package io.javabrains;

import java.util.function.Function;
import java.util.function.Predicate;

class InterfMain {
	public static void main(String[] args) {
		String str = "Cognizant Technology Solutions";

		Function<String, String> f = s -> s.replaceAll(" ", "");
		System.out.println(f.apply(str));

	}
}

#7.3


import java.util.function.Function;
import java.util.function.Predicate;

class InterfMain {
	public static void main(String[] args) {
		String str = "Cognizant Technology Solutions";

		Function<String, Integer> f = s -> s.length()- s.replaceAll(" ", "").length();
		System.out.println(f.apply(str));

	}
}
***********************************************************************************************************************
Output->Number of Spaces 2

#7.4
package io.javabrains;

import java.util.ArrayList;
import java.util.function.Function;

class EmployeeFun {
	String name;
	double salary;

	public EmployeeFun(String name, double salary) {
		this.name = name;
		this.salary = salary;
	}

	@Override
	public String toString() {
		return name + " " + salary;
	}

}

public class FunctionalEmployeeTest {

	public static void main(String[] args) {
		ArrayList<EmployeeFun> list = new ArrayList<EmployeeFun>();
		populate(list);
		// System.out.println("List-> "+list);
		Function<ArrayList<EmployeeFun>, Double> f = list01 -> {
			double totalSalary = 0.0;
			for (EmployeeFun employeeFun : list01) {
				totalSalary = totalSalary + employeeFun.salary;

			}
			return totalSalary;

		};
		System.out.println("Employee Total Salary-> " + f.apply(list));

	}

	private static void populate(ArrayList<EmployeeFun> list) {
		list.add(new EmployeeFun("Sunny", 10000.00));
		list.add(new EmployeeFun("Bunny", 20000.00));
		list.add(new EmployeeFun("Chinny", 30000.00));
		list.add(new EmployeeFun("Pinny", 40000.00));
		list.add(new EmployeeFun("Vinny", 50000.00));

	}
}

Output-> Employee Total Salary-> 150000.0
**********************************************************************************************************

